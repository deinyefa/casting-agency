{"version":3,"sources":["assets/actors.jpg","assets/movies.jpg","components/UI/Loader.module.css","react-auth0-spa.js","utils/history.js","components/Home.js","components/NavBar.js","hooks/useFetch.js","components/Movie.js","utils/auth_config.js","components/UI/Loader.js","components/Forms/AddMovie.js","components/Movies.js","components/Actor.js","components/Forms/AddActor.js","components/Actors.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","createBrowserHistory","Home","isAuthenticated","Container","className","Card","CardImg","top","width","height","src","MoviesImg","alt","CardBody","to","ActorsImg","NavBar","useState","isOpen","setIsOpen","user","loginWithRedirect","logout","logoutWithRedirect","returnTo","origin","Navbar","color","light","expand","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","tag","RouterNavLink","exact","activeClassName","Button","id","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","picture","DropdownMenu","DropdownItem","header","name","block","style","minHeight","useFetch","url","defaultData","token","method","body","data","updateData","useEffect","a","fetch","headers","Authorization","JSON","stringify","response","json","fetchData","Movie","withRouter","movieData","exposedToken","removeItem","Col","md","CardTitle","CardText","release_date","permissions","indexOf","state","editing","REACT_APP_SERVER_URL","process","Loader","LoaderStyles","AddMovie","props","formValues","setFormValues","updateFormFields","field","value","handleFormSubmit","result","movie","push","CardHeader","Form","onSubmit","e","preventDefault","FormGroup","Label","Input","type","onChange","target","CardFooter","Movies","decodedToken","setResponse","pageNum","setPageNum","setToken","getTokenSilently","loading","then","res","jwt","getResult","Row","movies","map","key","pageNumbers","maxPage","Math","ceil","total_movies","i","create_pagination","RouteMovies","path","component","Actor","actorData","age","gender","AddActor","actor","Actors","actors","total_actors","RouteActors","App","Boolean","hostname","match","ReactDOM","render","children","onRedirectCallback","initOptions","setIsAuthenticated","setUser","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","console","log","Provider","getIdTokenClaims","getTokenWithPopup","domain","client_id","redirect_uri","targetURL","audience","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCC3CD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,2OCEpDC,EAA4B,kBAC9BC,OAAOC,QAAQC,aAAa,GAAIC,SAASC,MAAOJ,OAAOK,SAASC,WAEvDC,EAAeC,IAAMC,gBACrBC,EAAW,kBAAMC,qBAAWJ,I,QCL1BK,gB,iECKFC,EAAO,WAAO,IACjBC,EAAoBJ,IAApBI,gBACR,OACE,oCACE,8CACCA,EACC,kBAACC,EAAA,EAAD,CAAWC,UAAU,UACnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAG,EACHC,MAAM,OACNC,OAAO,MACPC,IAAKC,IACLC,IAAI,eAEN,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,WAAT,mBAGJ,kBAACT,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAG,EACHC,MAAM,OACNC,OAAO,MACPC,IAAKK,IACLH,IAAI,eAEN,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,WAAT,oBAKN,uBAAGV,UAAU,oBAAb,uB,mGCrBKY,EAAS,WAAO,IAAD,EACEC,oBAAS,GADX,mBACnBC,EADmB,KACXC,EADW,OAEmCrB,IAArDsB,EAFkB,EAElBA,KAAMlB,EAFY,EAEZA,gBAAiBmB,EAFL,EAEKA,kBAAmBC,EAFxB,EAEwBA,OAG5CC,EAAqB,kBACzBD,EAAO,CACLE,SAAUpC,OAAOK,SAASgC,UAG9B,OACE,yBAAKrB,UAAU,iBACb,kBAACsB,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MACjC,kBAAC1B,EAAA,EAAD,KACE,kBAAC2B,EAAA,EAAD,CAAa1B,UAAU,SACvB,kBAAC2B,EAAA,EAAD,CAAeC,QAZR,kBAAMb,GAAWD,MAaxB,kBAACe,EAAA,EAAD,CAAUf,OAAQA,EAAQgB,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAK/B,UAAU,UAAU8B,QAAM,GAC7B,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,IAAKC,IACLzB,GAAG,IACH0B,OAAK,EACLC,gBAAgB,4BAJlB,UAUJ,kBAACN,EAAA,EAAD,CAAK/B,UAAU,oBAAoB8B,QAAM,IACrChC,GACA,kBAACkC,EAAA,EAAD,KACE,kBAACM,EAAA,EAAD,CACEC,GAAG,aACHhB,MAAM,UACNvB,UAAU,aACV4B,QAAS,kBAAMX,EAAkB,MAJnC,WAUHnB,GACC,kBAAC0C,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAChC,kBAACC,EAAA,EAAD,CAAgBF,KAAG,EAACG,OAAK,EAACL,GAAG,mBAC3B,yBACEjC,IAAKU,EAAOA,EAAK6B,QAAU,GAC3BrC,IAAI,UACJR,UAAU,kCACVI,MAAM,QAGV,kBAAC0C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcC,QAAM,GAAEhC,EAAOA,EAAKiC,KAAO,IACzC,kBAACF,EAAA,EAAD,CACEb,IAAKC,IACLzB,GAAG,UACHV,UAAU,mBACVqC,gBAAgB,4BAJlB,UAQA,kBAACU,EAAA,EAAD,CACEb,IAAKC,IACLzB,GAAG,UACHV,UAAU,mBACVqC,gBAAgB,4BAJlB,UAQA,kBAACU,EAAA,EAAD,CACER,GAAG,cACHX,QAAS,kBAAMT,MAFjB,eAUNrB,GACA,kBAACiC,EAAA,EAAD,CAAK/B,UAAU,YAAY8B,QAAM,GAC/B,kBAACE,EAAA,EAAD,KACE,kBAACM,EAAA,EAAD,CACEC,GAAG,aACHhB,MAAM,UACN2B,OAAK,EACLtB,QAAS,kBAAMX,EAAkB,MAJnC,YAWLnB,GACC,kBAACiC,EAAA,EAAD,CACE/B,UAAU,oCACV8B,QAAM,EACNqB,MAAO,CAAEC,UAAW,MAEpB,kBAACpB,EAAA,EAAD,KACE,0BAAMhC,UAAU,aACd,yBACEM,IAAKU,EAAOA,EAAK6B,QAAU,GAC3BrC,IAAI,UACJR,UAAU,sDACVI,MAAM,OAER,wBAAIJ,UAAU,kBAAkBgB,EAAOA,EAAKiC,KAAO,MAGvD,kBAACjB,EAAA,EAAD,KAEE,kBAAC,IAAD,CACEtB,GAAG,UACH2B,gBAAgB,4BAFlB,WAOF,kBAACL,EAAA,EAAD,KAEE,kBAAC,IAAD,CACEtB,GAAG,IACH6B,GAAG,cACHX,QAAS,kBAAMT,MAHjB,kB,iCC3ILkC,EAAW,SAACC,EAAKC,EAAaC,GAA+B,IAAxBC,EAAuB,uDAAhB,MAAOC,EAAS,yCAC1C7C,mBAAS0C,GADiC,mBAC9DI,EAD8D,KACxDC,EADwD,KAkBrE,OAfAC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAC2BC,MAAMT,EAAK,CAC9BG,OAAQA,EACRO,QAAS,CACLC,cAAe,UAAYT,EAC3B,eAAgB,oBAEpBE,KAAMQ,KAAKC,UAAUT,KAP7B,cACUU,EADV,YASIR,EATJ,SASqBQ,EAASC,OAT9B,8EADY,uBAAC,WAAD,wBAYZC,KACD,CAAChB,EAAKE,IAEFG,G,wBC6BEY,EAAQC,aA7CH,SAAC,GAAD,IACdC,EADc,EACdA,UACAC,EAFc,EAEdA,aACAlB,EAHc,EAGdA,MACAmB,EAJc,EAIdA,WAJc,OAMV,oCACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAI7E,UAAU,QAClB,kBAACC,EAAA,EAAD,KACI,kBAACQ,EAAA,EAAD,KACI,kBAACqE,EAAA,EAAD,KAAYL,EAAUrF,OACtB,kBAAC2F,EAAA,EAAD,sBAAyBN,EAAUO,cACnC,yBAAKhF,UAAU,iBAEN,IADJ0E,EAAaO,YAAYC,QAAQ,uBAE1B,kBAAC5C,EAAA,EAAD,CACIf,MAAM,UACNvB,UAAU,aACVkC,IAAKC,IACLzB,GAAI,CACApB,SAAU,oBACV6F,MAAO,CAAEV,YAAWW,SAAS,EAAM5B,WAN3C,QAWA,MACqD,IAA5DkB,EAAaO,YAAYC,QAAQ,sBAC9B,kBAAC5C,EAAA,EAAD,CACIJ,IAAKC,IACLzB,GAAG,UACHa,MAAM,SACNvB,UAAU,cACV4B,QAAS,kBAAM+C,EAAWF,EAAUlC,MALxC,UASA,aCpCnB8C,EAAuBC,wC,kBCFvBC,GAAS,kBAAM,yBAAKvF,UAAWwF,KAAaD,QAA7B,e,8RCYrB,IAAME,GAAW,SAAAC,GACpB,IAAMpC,EAAG,UAAM+B,EAAN,WADoB,EAESK,EAAMrG,SAAS8F,MAA7CC,EAFqB,EAErBA,QAASX,EAFY,EAEZA,UAAWjB,EAFC,EAEDA,MAFC,EAGO3C,mBAAS,CACzCzB,MAAQgG,GAAWX,GAAaA,EAAUrF,OAAU,GACpD4F,aAAeI,GAAWX,GAAaA,EAAUO,cAAiB,KALzC,mBAGtBW,EAHsB,KAGVC,EAHU,KAQvBC,EAAmB,SAACC,EAAOC,GAC7BH,E,4VAAc,CAAD,GACND,EADM,gBAERG,EAAQC,MAIXC,EAAgB,uCAAG,WAAOzD,EAAIoB,GAAX,iBAAAG,EAAA,sEACAC,MAAMqB,EAAO,UAAM9B,EAAN,YAAaf,GAAOe,EAAK,CACvDG,OAAQ2B,EAAU,QAAU,OAC5BpB,QAAS,CACLC,cAAe,UAAYT,EAC3B,eAAgB,oBAEpBE,KAAMQ,KAAKC,UAAUR,KAPJ,cACfsC,EADe,gBASEA,EAAO5B,OATT,OASfD,EATe,OAWrBwB,EAAc,CACVxG,MAAOgF,EAAS8B,MAAM9G,MACtB4F,aAAcZ,EAAS8B,MAAMlB,eAEjCU,EAAMzG,QAAQkH,KAAK,WAfE,2CAAH,wDAkBtB,OACI,kBAAClG,EAAA,EAAD,KACI,kBAACmG,GAAA,EAAD,oBACA,kBAAC3F,EAAA,EAAD,KACI,kBAAC4F,GAAA,EAAD,CACIC,SAAU,SAAAC,GACNA,EAAEC,iBACFR,EAAiB,CACb5G,MAAOuG,EAAWvG,MAClB4F,aAAcW,EAAWX,iBAIjC,kBAACyB,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,oBACA,kBAACC,GAAA,EAAD,CACIC,KAAK,OACL3D,KAAK,QACLV,GAAG,QACHwD,MAAOJ,EAAWvG,MAClByH,SAAU,SAAAN,GAAC,OAAIV,EAAiB,QAASU,EAAEO,OAAOf,WAG1D,kBAACU,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,2BACA,kBAACC,GAAA,EAAD,CACIC,KAAK,OACL3D,KAAK,eACLV,GAAG,eACHwD,MAAOJ,EAAWX,aAClB6B,SAAU,SAAAN,GAAC,OAAIV,EAAiB,eAAgBU,EAAEO,OAAOf,aAKzE,kBAACgB,GAAA,EAAD,CAAY/G,UAAU,kCAClB,kBAACsC,EAAA,EAAD,CAAQJ,IAAKC,IAAezB,GAAG,UAAUa,MAAM,WAA/C,UAGA,kBAACe,EAAA,EAAD,CACIf,MAAM,UACNqF,KAAK,SACLhF,QAAS,SAAA2E,GACLA,EAAEC,iBACFR,EAAkBvB,GAAaA,EAAUlC,IAAO,KAAM,CAClDnD,MAAOuG,EAAWvG,MAClB4F,aAAcW,EAAWX,iBAPrC,UC5EVgC,GAAS,WAAO,IAedC,EAfa,EACepG,mBAAS,IADxB,mBACVuD,EADU,KACA8C,EADA,OAEarG,mBAAS,GAFtB,mBAEVsG,EAFU,KAEDC,EAFC,OAGSvG,qBAHT,mBAGV2C,EAHU,KAGH6D,EAHG,OAI2B3H,IAApC4H,EAJS,EAITA,iBAAkBtG,EAJT,EAISA,KAAMuG,EAJf,EAIeA,QAE1BjE,EAAG,UAAM+B,EAAN,wBAA0C8B,GAC7ClB,EAAS5C,EAASC,EAAK,GAAIE,IAAU,GAE3CK,qBAAU,WACNqD,EAAYjB,KACb,CAACA,IAEAjF,IAASuG,GAASD,IAAmBE,MAAK,SAAAC,GAAG,OAAIJ,EAASI,MAG1DjE,IAAOyD,EAAeS,IAAIlE,IAE9B,IAsBMmB,EAAU,uCAAG,WAAMpC,GAAN,iBAAAuB,EAAA,sEACMC,MAAM,GAAD,OAAIsB,EAAJ,mBAAmC9C,GAAM,CAC/DkB,OAAQ,SACRO,QAAS,CACLC,cAAe,UAAYT,EAC3B,eAAgB,sBALT,cACTyC,EADS,gBAQSA,EAAO5B,OARhB,OAQTsD,EARS,OASfT,EAAYS,GATG,2CAAH,sDAYhB,OACI,oCACI,kBAAC5H,EAAA,EAAD,KACI,uCACCkH,IAC+D,IAA5DA,EAAahC,YAAYC,QAAQ,sBAC7B,kBAAC5C,EAAA,EAAD,CAAQf,MAAM,UAAUb,GAAI,CACxBpB,SAAU,oBACV6F,MAAO,CAAEC,SAAS,EAAOX,UAAW,KAAMjB,MAAOA,IAClDtB,IAAKC,KAHR,eAMA,KACR,kBAACyF,EAAA,EAAD,KACKxD,EAASyD,OACNzD,EAASyD,OAAOC,KAAI,SAAA5B,GAAK,OACrB,kBAAC3B,EAAD,CACIwD,IAAK7B,EAAM3D,GACXkC,UAAWyB,EACXxB,aAAcuC,EACdzD,MAAOA,EACPmB,WAAYA,OAIhB,kBAAC,GAAD,OAGZ,kBAACiD,EAAA,EAAD,CAAK5H,UAAU,0BA7DD,WAItB,IAHA,IAAIgI,EAAc,GACdC,EAAUC,KAAKC,KAAKlC,EAAOmC,aAAe,IAFlB,WAInBC,GACLL,EAAW,sBACJA,GADI,CAEP,0BACID,IAAKM,EACLrI,UAAS,mBAAcqI,IAAMlB,EAAU,SAAW,IAClDvF,QAAS,WAXCwF,EAYKiB,KAGdA,MAVJA,EAAI,EAAGA,GAAKJ,EAASI,IAAM,EAA3BA,GAcT,OAAOL,EA2C0CM,OAM5CC,GAAc,WACvB,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,oBAAoBC,UAAWhD,KAC3C,kBAAC,IAAD,CAAO+C,KAAK,UAAUC,UAAWzB,OCpDhC0B,GAAQlE,aA7CH,SAAC,GAAD,IACdmE,EADc,EACdA,UACAjE,EAFc,EAEdA,aACAlB,EAHc,EAGdA,MACAmB,EAJc,EAIdA,WAJc,OAMV,oCACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAI7E,UAAU,QAClB,kBAACC,EAAA,EAAD,KACI,kBAACQ,EAAA,EAAD,KACI,kBAACqE,EAAA,EAAD,KACK6D,EAAU1F,KADf,KACuB0F,EAAUC,KAEjC,kBAAC7D,EAAA,EAAD,KAAW4D,EAAUE,QACrB,yBAAK7I,UAAU,iBAEN,IADJ0E,EAAaO,YAAYC,QAAQ,uBAE1B,kBAAC5C,EAAA,EAAD,CACIf,MAAM,UACNvB,UAAU,aACVkC,IAAKC,IACLzB,GAAI,CACApB,SAAU,oBACV6F,MAAO,CAAEwD,YAAWvD,SAAS,EAAM5B,WAN3C,QAWA,MACqD,IAA5DkB,EAAaO,YAAYC,QAAQ,sBAC9B,kBAAC5C,EAAA,EAAD,CACIf,MAAM,SACNvB,UAAU,cACV4B,QAAS,kBAAM+C,EAAWgE,EAAUpG,MAHxC,UAOA,a,+NC1BzB,IAAMuG,GAAW,SAAApD,GACpB,IAAMpC,EAAG,UAAM+B,EAAN,WADoB,EAESK,EAAMrG,SAAS8F,MAA7CC,EAFqB,EAErBA,QAASuD,EAFY,EAEZA,UAAWnF,EAFC,EAEDA,MAFC,EAGO3C,mBAAS,CACzCoC,KAAOmC,GAAWuD,GAAaA,EAAU1F,MAAS,GAClD2F,IAAMxD,GAAWuD,GAAaA,EAAUC,KAAQ,GAChDC,OAASzD,GAAWuD,GAAaA,EAAUE,QAAW,KAN7B,mBAGtBlD,EAHsB,KAGVC,EAHU,KASvBC,EAAmB,SAACC,EAAOC,GAC7BH,E,4VAAc,IACPD,EADM,gBAERG,EAAQC,MAIXC,EAAgB,uCAAG,WAAOzD,EAAIoB,GAAX,iBAAAG,EAAA,sEACAC,MAAMqB,EAAO,UAAM9B,EAAN,YAAaf,GAAOe,EAAK,CACvDG,OAAQ2B,EAAU,QAAU,OAC5BpB,QAAS,CACLC,cAAe,UAAYT,EAC3B,eAAgB,oBAEpBE,KAAMQ,KAAKC,UAAUR,KAPJ,cACfsC,EADe,gBASEA,EAAO5B,OATT,OASfD,EATe,OAWrBwB,EAAc,CACV3C,KAAMmB,EAAS2E,MAAM9F,KACrB2F,IAAKxE,EAAS2E,MAAMH,IACpBC,OAAQzE,EAAS2E,MAAMF,SAE3BnD,EAAMzG,QAAQkH,KAAK,WAhBE,2CAAH,wDAmBtB,OACI,oCACI,kBAAClG,EAAA,EAAD,KACI,kBAACmG,GAAA,EAAD,qBACA,kBAAC3F,EAAA,EAAD,KACI,kBAAC4F,GAAA,EAAD,CACIC,SAAU,SAAAC,GACNA,EAAEC,iBACFR,EAAiB,CACb/C,KAAM0C,EAAW1C,KACjB2F,IAAKjD,EAAWiD,IAChBC,OAAQlD,EAAWkD,WAI3B,kBAACpC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,mBACA,kBAACC,GAAA,EAAD,CACIC,KAAK,OACL3D,KAAK,OACLV,GAAG,OACHwD,MAAOJ,EAAW1C,KAClB4D,SAAU,SAAAN,GAAC,OAAIV,EAAiB,OAAQU,EAAEO,OAAOf,WAGzD,kBAACU,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,kBACA,kBAACC,GAAA,EAAD,CACIC,KAAK,OACL3D,KAAK,MACLV,GAAG,MACHwD,MAAOJ,EAAWiD,IAClB/B,SAAU,SAAAN,GAAC,OAAIV,EAAiB,MAAOU,EAAEO,OAAOf,WAGxD,kBAACU,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,qBACA,kBAACC,GAAA,EAAD,CACIC,KAAK,OACL3D,KAAK,SACLV,GAAG,SACHwD,MAAOJ,EAAWkD,OAClBhC,SAAU,SAAAN,GAAC,OAAIV,EAAiB,SAAUU,EAAEO,OAAOf,aAKnE,kBAACgB,GAAA,EAAD,CAAY/G,UAAU,kCAClB,kBAACsC,EAAA,EAAD,CAAQf,MAAM,UAAUW,IAAKC,IAAezB,GAAG,WAA/C,UAGA,kBAAC4B,EAAA,EAAD,CACIf,MAAM,UACNqF,KAAK,SACLhF,QAAS,SAAA2E,GACLA,EAAEC,iBACFR,EAAkB2C,GAAaA,EAAUpG,IAAO,KAAM,CAClDU,KAAM0C,EAAW1C,KACjB2F,IAAKjD,EAAWiD,IAChBC,OAAQlD,EAAWkD,WAR/B,WC1FdG,GAAS,WAAO,IAed/B,EAfa,EACepG,mBAAS,IADxB,mBACVuD,EADU,KACA8C,EADA,OAEarG,mBAAS,GAFtB,mBAEVsG,EAFU,KAEDC,EAFC,OAGSvG,qBAHT,mBAGV2C,EAHU,KAGH6D,EAHG,OAI2B3H,IAApC4H,EAJS,EAITA,iBAAkBtG,EAJT,EAISA,KAAMuG,EAJf,EAIeA,QAE1BjE,EAAG,UAAM+B,EAAN,wBAA0C8B,GAC7ClB,EAAS5C,EAASC,EAAK,GAAIE,GAEjCK,qBAAU,WACNqD,EAAYjB,KACb,CAACA,IAEAjF,IAASuG,GAASD,IAAmBE,MAAK,SAAAC,GAAG,OAAIJ,EAASI,MAG1DjE,IAAOyD,EAAeS,IAAIlE,IAE9B,IAsBMmB,EAAU,uCAAG,WAAMpC,GAAN,iBAAAuB,EAAA,sEACMC,MAAM,GAAD,OAAIsB,EAAJ,mBAAmC9C,GAAM,CAC/DkB,OAAQ,SACRO,QAAS,CACLC,cAAe,UAAYT,EAC3B,eAAgB,sBALT,cACTyC,EADS,gBAQSA,EAAO5B,OARhB,OAQTsD,EARS,OASfT,EAAYS,GATG,2CAAH,sDAYhB,OACI,kBAAC5H,EAAA,EAAD,KACI,sCACCkH,IAC+D,IAA5DA,EAAahC,YAAYC,QAAQ,sBAC7B,kBAAC5C,EAAA,EAAD,CACIf,MAAM,UACNb,GAAI,CACApB,SAAU,oBACV6F,MAAO,CAAEC,SAAS,EAAOuD,UAAW,KAAMnF,UAE9CtB,IAAKC,KANT,gBAUJ,KACJ,kBAACyF,EAAA,EAAD,KACKxD,EAAS6E,OACN7E,EAAS6E,OAAOnB,KAAI,SAAAiB,GAAK,OACrB,kBAACL,GAAD,CACIX,IAAKgB,EAAMxG,GACXoG,UAAWI,EACXrE,aAAcuC,EACdzD,MAAOA,EACPmB,WAAYA,OAIhB,kBAAC,GAAD,OAGZ,kBAACiD,EAAA,EAAD,CAAK5H,UAAU,0BAhEG,WAItB,IAHA,IAAIgI,EAAc,GACdC,EAAUC,KAAKC,KAAKlC,EAAOiD,aAAe,IAFlB,WAInBb,GACLL,EAAW,sBACJA,GADI,CAEP,0BACID,IAAKM,EACLrI,UAAS,mBAAcqI,IAAMlB,EAAU,SAAW,IAClDvF,QAAS,WAXCwF,EAYKiB,KAGdA,MAVJA,EAAI,EAAGA,GAAKJ,EAASI,IAAM,EAA3BA,GAcT,OAAOL,EA8CsCM,MAKxCa,GAAc,kBACvB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOX,KAAK,oBAAoBC,UAAWK,KAC3C,kBAAC,IAAD,CAAON,KAAK,UAAUC,UAAWO,O,MCrE1BI,OAtBf,WAAgB,IACN7B,EAAkB7H,EAAlB6H,QAASvG,EAAStB,EAATsB,KAEjB,OAAIuG,IAAYvG,EACP,yCAGP,kBAAC,IAAD,CAAQ/B,QAASA,GACf,yBAAKsD,GAAG,MAAMvC,UAAU,4BACtB,kBAAC,EAAD,MACA,kBAACD,EAAA,EAAD,CAAWC,UAAU,oBACnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwI,KAAK,IAAIpG,OAAK,EAACqG,UAAW5I,IACjC,kBAAC,IAAD,CAAO2I,KAAK,UAAUC,UAAWF,KACjC,kBAAC,IAAD,CAAOC,KAAK,UAAUC,UAAWU,UCbzBE,QACW,cAA7BrK,OAAOK,SAASiK,UAEe,UAA7BtK,OAAOK,SAASiK,UAEhBtK,OAAOK,SAASiK,SAASC,MACvB,2D,MCHNC,IAASC,OACL,mBfRyB,SAAC,GAIvB,IAHHC,EAGE,EAHFA,SAGE,IAFFC,0BAEE,MAFmB5K,EAEnB,EADC6K,EACD,mDAC4C/I,qBAD5C,mBACKf,EADL,KACsB+J,EADtB,OAEsBhJ,qBAFtB,mBAEKG,EAFL,KAEW8I,EAFX,OAG8BjJ,qBAH9B,mBAGKkJ,EAHL,KAGkBC,EAHlB,OAI4BnJ,oBAAS,GAJrC,mBAIK0G,EAJL,KAIc0C,EAJd,OAKgCpJ,oBAAS,GALzC,mBAKKqJ,EALL,KAKgBC,EALhB,KAOFtG,qBAAU,YACS,uCAAG,oCAAAC,EAAA,sEACcsG,IAAkBR,GADhC,UACRS,EADQ,OAEdL,EAASK,IAELrL,OAAOK,SAASiL,OAAOC,SAAS,SAJtB,iCAKiBF,EAAcG,yBAL/B,gBAKFC,EALE,EAKFA,SACRd,EAAmBc,GANT,yBASgBJ,EAAcvK,kBAT9B,WASRA,EATQ,OAUd+J,EAAmB/J,IAEfA,EAZU,kCAaSuK,EAAcK,UAbvB,QAaJ1J,EAbI,OAcV8I,EAAQ9I,GAdE,QAiBdiJ,GAAW,GAjBG,4CAAH,qDAmBfU,KACD,IAEH,IAAMC,EAAc,uCAAG,0CAAA9G,EAAA,6DAAO+G,EAAP,+BAAgB,GACnCV,GAAa,GADM,kBAITJ,EAAYa,eAAeC,GAJlB,uDAMfC,QAAQC,IAAR,MANe,yBAQfZ,GAAa,GARE,sCAWAJ,EAAYW,UAXZ,QAWb1J,EAXa,OAYnB8I,EAAQ9I,GACR6I,GAAmB,GAbA,+DAAH,qDAgBdW,EAAsB,uCAAG,4BAAA1G,EAAA,6DAC3BmG,GAAW,GADgB,SAErBF,EAAYS,yBAFS,uBAGRT,EAAYW,UAHJ,OAGrB1J,EAHqB,OAI3BiJ,GAAW,GACXJ,GAAmB,GACnBC,EAAQ9I,GANmB,2CAAH,qDAS5B,OACI,kBAACzB,EAAayL,SAAd,CACIjF,MAAO,CACHjG,kBACAkB,OACAuG,UACA2C,YACAU,iBACAJ,yBACAS,iBAAkB,kBAAUlB,EAAYkB,iBAAZ,MAAAlB,EAAW,YACvC9I,kBAAmB,kBAAU8I,EAAY9I,kBAAZ,MAAA8I,EAAW,YACxCzC,iBAAkB,kBAAUyC,EAAYzC,iBAAZ,MAAAyC,EAAW,YACvCmB,kBAAmB,kBAAUnB,EAAYmB,kBAAZ,MAAAnB,EAAW,YACxC7I,OAAQ,kBAAU6I,EAAY7I,OAAZ,MAAA6I,EAAW,cAGhCL,KenET,CACIyB,OTjBwB7F,yBSkBxB8F,UTjB0B9F,mCSkB1B+F,aThB6B/F,wCSiB7BqE,mBATmB,SAAAc,GACvBxL,EAAQkH,KAAKsE,GAAYA,EAASa,UAAYb,EAASa,UAAYtM,OAAOK,SAASC,WAS/EiM,STnB0BjG,kBSqB1B,kBAAC,GAAD,OACcnG,SAASqM,eAAe,SDyGxC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnE,MAAK,SAAAoE,GACjCA,EAAaC,kB","file":"static/js/main.028f9721.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/actors.525a1df3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/movies.f68ef00d.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader_Loader__3-3CJ\",\"load4\":\"Loader_load4__2oAhs\"};","import React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n    window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n    children,\n    onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n    ...initOptions\n}) => {\n    const [isAuthenticated, setIsAuthenticated] = useState()\n    const [user, setUser] = useState()\n    const [auth0Client, setAuth0] = useState()\n    const [loading, setLoading] = useState(true)\n    const [popupOpen, setPopupOpen] = useState(true)\n\n    useEffect(() => {\n        const initAuth0 = async () => {\n            const auth0FromHook = await createAuth0Client(initOptions);\n            setAuth0(auth0FromHook)\n\n            if (window.location.search.includes('code=')) {\n                const { appState } = await auth0FromHook.handleRedirectCallback()\n                onRedirectCallback(appState)\n            }\n\n            const isAuthenticated = await auth0FromHook.isAuthenticated()\n            setIsAuthenticated(isAuthenticated)\n\n            if (isAuthenticated) {\n                const user = await auth0FromHook.getUser()\n                setUser(user)\n            }\n\n            setLoading(false)\n        };\n        initAuth0()\n    }, [])\n\n    const loginWithPopup = async (params = {}) => {\n        setPopupOpen(true)\n\n        try {\n            await auth0Client.loginWithPopup(params)\n        } catch (error) {\n            console.log(error)\n        } finally {\n            setPopupOpen(false)\n        }\n\n        const user = await auth0Client.getUser()\n        setUser(user)\n        setIsAuthenticated(true)\n    }\n\n    const handleRedirectCallback = async () => {\n        setLoading(true)\n        await auth0Client.handleRedirectCallback()\n        const user = await auth0Client.getUser()\n        setLoading(false)\n        setIsAuthenticated(true)\n        setUser(user)\n    }\n\n    return (\n        <Auth0Context.Provider\n            value={{\n                isAuthenticated,\n                user,\n                loading,\n                popupOpen,\n                loginWithPopup,\n                handleRedirectCallback,\n                getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n                loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n                getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n                getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n                logout: (...p) => auth0Client.logout(...p)\n            }}\n        >\n            {children}\n        </Auth0Context.Provider>\n    )\n}","import { createBrowserHistory } from 'history'\n\nexport default createBrowserHistory()","import React from \"react\";\nimport { Card, CardBody, CardImg, Container } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport { useAuth0 } from \"../react-auth0-spa\";\nimport ActorsImg from '../assets/actors.jpg'\nimport MoviesImg from '../assets/movies.jpg'\n\nexport const Home = () => {\n  const { isAuthenticated } = useAuth0();\n  return (\n    <>\n      <h1>Casting Agency</h1>\n      {isAuthenticated ? (\n        <Container className=\"d-flex\">\n          <Card>\n            <CardImg\n              top\n              width=\"100%\"\n              height=\"300\"\n              src={MoviesImg}\n              alt=\"Movies img\"\n            />\n            <CardBody>\n              <Link to=\"/movies\">Manage movies</Link>\n            </CardBody>\n          </Card>\n          <Card>\n            <CardImg\n              top\n              width=\"100%\"\n              height=\"300\"\n              src={ActorsImg}\n              alt=\"Actors img\"\n            />\n            <CardBody>\n              <Link to=\"/actors\">Manage actors</Link>\n            </CardBody>\n          </Card>\n        </Container>\n      ) : (\n        <p className=\"lead text-center\">Login to continue</p>\n      )}\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { NavLink as RouterNavLink } from \"react-router-dom\";\nimport { useAuth0 } from \"../react-auth0-spa\";\nimport {\n  Collapse,\n  Container,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Button,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from \"reactstrap\";\n\nexport const NavBar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { user, isAuthenticated, loginWithRedirect, logout } = useAuth0();\n  const toggle = () => setIsOpen(!isOpen);\n\n  const logoutWithRedirect = () =>\n    logout({\n      returnTo: window.location.origin\n    });\n\n  return (\n    <div className=\"nav-container\">\n      <Navbar color=\"light\" light expand=\"md\">\n        <Container>\n          <NavbarBrand className=\"logo\" />\n          <NavbarToggler onClick={toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"mr-auto\" navbar>\n              <NavItem>\n                <NavLink\n                  tag={RouterNavLink}\n                  to=\"/\"\n                  exact\n                  activeClassName=\"router-link-exact-active\"\n                >\n                  Home\n                </NavLink>\n              </NavItem>\n            </Nav>\n            <Nav className=\"d-none d-md-block\" navbar>\n              {!isAuthenticated && (\n                <NavItem>\n                  <Button\n                    id=\"qsLoginBtn\"\n                    color=\"primary\"\n                    className=\"btn-margin\"\n                    onClick={() => loginWithRedirect({})}\n                  >\n                    Log in\n                  </Button>\n                </NavItem>\n              )}\n              {isAuthenticated && (\n                <UncontrolledDropdown nav inNavbar>\n                  <DropdownToggle nav caret id=\"profileDropDown\">\n                    <img\n                      src={user ? user.picture : ''}\n                      alt=\"Profile\"\n                      className=\"nav-user-profile rounded-circle\"\n                      width=\"50\"\n                    />\n                  </DropdownToggle>\n                  <DropdownMenu>\n                    <DropdownItem header>{user ? user.name : ''}</DropdownItem>\n                    <DropdownItem\n                      tag={RouterNavLink}\n                      to=\"/movies\"\n                      className=\"dropdown-profile\"\n                      activeClassName=\"router-link-exact-active\"\n                    >\n                      Movies\n                    </DropdownItem>\n                    <DropdownItem\n                      tag={RouterNavLink}\n                      to=\"/actors\"\n                      className=\"dropdown-profile\"\n                      activeClassName=\"router-link-exact-active\"\n                    >\n                      Actors\n                    </DropdownItem>\n                    <DropdownItem\n                      id=\"qsLogoutBtn\"\n                      onClick={() => logoutWithRedirect()}\n                    >\n                      Log out\n                    </DropdownItem>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n              )}\n            </Nav>\n            {!isAuthenticated && (\n              <Nav className=\"d-md-none\" navbar>\n                <NavItem>\n                  <Button\n                    id=\"qsLoginBtn\"\n                    color=\"primary\"\n                    block\n                    onClick={() => loginWithRedirect({})}\n                  >\n                    Log in\n                  </Button>\n                </NavItem>\n              </Nav>\n            )}\n            {isAuthenticated && (\n              <Nav\n                className=\"d-md-none justify-content-between\"\n                navbar\n                style={{ minHeight: 170 }}\n              >\n                <NavItem>\n                  <span className=\"user-info\">\n                    <img\n                      src={user ? user.picture : ''}\n                      alt=\"Profile\"\n                      className=\"nav-user-profile d-inline-block rounded-circle mr-3\"\n                      width=\"50\"\n                    />\n                    <h6 className=\"d-inline-block\">{user ? user.name : ''}</h6>\n                  </span>\n                </NavItem>\n                <NavItem>\n                  {/* <FontAwesomeIcon icon=\"user\" className=\"mr-3\" /> */}\n                  <RouterNavLink\n                    to=\"/actors\"\n                    activeClassName=\"router-link-exact-active\"\n                  >\n                    Actors\n                  </RouterNavLink>\n                </NavItem>\n                <NavItem>\n                  {/* <FontAwesomeIcon icon=\"power-off\" className=\"mr-3\" /> */}\n                  <RouterNavLink\n                    to=\"#\"\n                    id=\"qsLogoutBtn\"\n                    onClick={() => logoutWithRedirect()}\n                  >\n                    Log out\n                  </RouterNavLink>\n                </NavItem>\n              </Nav>\n            )}\n          </Collapse>\n        </Container>\n      </Navbar>\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\n\nexport const useFetch = (url, defaultData, token, method='GET', body) => {\n    const [data, updateData] = useState(defaultData);\n\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch(url, {\n                method: method,\n                headers: {\n                    Authorization: 'Bearer ' + token,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(body)\n            })\n            updateData(await response.json())\n        }\n        fetchData()\n    }, [url, token])\n\n    return data\n}","import React from \"react\";\nimport { Col, Card, CardBody, CardTitle, CardText, Button } from \"reactstrap\";\nimport { NavLink as RouterNavLink, withRouter } from \"react-router-dom\";\n\nconst MovieItem = ({\n    movieData,\n    exposedToken,\n    token,\n    removeItem\n}) => (\n        <>\n            <Col md=\"4\" className=\"my-3\">\n                <Card>\n                    <CardBody>\n                        <CardTitle>{movieData.title}</CardTitle>\n                        <CardText>Release Date: {movieData.release_date}</CardText>\n                        <div className=\"clearfix p-2\">\n                            {exposedToken.permissions.indexOf(\"patch:actors+movies\") !==\n                                -1 ? (\n                                    <Button\n                                        color=\"primary\"\n                                        className=\"float-left\"\n                                        tag={RouterNavLink}\n                                        to={{\n                                            pathname: '/movies/add-movie',\n                                            state: { movieData, editing: true, token }\n                                        }}\n                                    >\n                                        Edit\n                                </Button>\n                                ) : null}\n                            {exposedToken.permissions.indexOf(\"post+delete:movies\") !== -1 ? (\n                                <Button\n                                    tag={RouterNavLink}\n                                    to=\"/movies\"\n                                    color=\"danger\"\n                                    className=\"float-right\"\n                                    onClick={() => removeItem(movieData.id)}\n                                >\n                                    Delete\n                            </Button>\n                            ) : null}\n                        </div>\n                    </CardBody>\n                </Card>\n            </Col>\n        </>\n    );\n\nexport const Movie = withRouter(MovieItem)","export const REACT_APP_DOMAIN = process.env.REACT_APP_DOMAIN;\nexport const REACT_APP_CLIENTID = process.env.REACT_APP_CLIENTID;\nexport const REACT_APP_AUDIENCE = process.env.REACT_APP_AUDIENCE;\nexport const REACT_APP_CALLBACKURL = process.env.REACT_APP_CALLBACKURL;\nexport const REACT_APP_URL = process.env.REACT_APP_URL;\nexport const REACT_APP_SERVER_URL = process.env.REACT_APP_SERVER_URL\n","import React from 'react';\nimport LoaderStyles from './Loader.module.css';\n\nexport const Loader = () => <div className={LoaderStyles.Loader}>Loading...</div>","import React, { useState } from \"react\";\nimport {\n    Card,\n    CardHeader,\n    CardBody,\n    CardFooter,\n    Button,\n    Form,\n    FormGroup,\n    Label,\n    Input\n} from \"reactstrap\";\nimport { REACT_APP_SERVER_URL } from \"../../utils/auth_config\";\nimport { NavLink as RouterNavLink } from \"react-router-dom\";\n\nexport const AddMovie = props => {\n    const url = `${REACT_APP_SERVER_URL}/movies`;\n    const { editing, movieData, token } = props.location.state\n    const [formValues, setFormValues] = useState({\n        title: (editing && movieData && movieData.title) || \"\",\n        release_date: (editing && movieData && movieData.release_date) || \"\"\n    });\n\n    const updateFormFields = (field, value) => {\n        setFormValues({\n            ...formValues,\n            [field]: value\n        });\n    };\n\n    const handleFormSubmit = async (id, data) => {\n        const result = await fetch(editing ? `${url}/${id}` : url, {\n            method: editing ? \"PATCH\" : \"POST\",\n            headers: {\n                Authorization: \"Bearer \" + token,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        });\n        const response = await result.json();\n\n        setFormValues({\n            title: response.movie.title,\n            release_date: response.movie.release_date\n        });\n        props.history.push('/movies')\n    };\n\n    return (\n        <Card>\n            <CardHeader>Add a movie</CardHeader>\n            <CardBody>\n                <Form\n                    onSubmit={e =>{\n                        e.preventDefault()\n                        handleFormSubmit({\n                            title: formValues.title,\n                            release_date: formValues.release_date\n                        })}\n                    }\n                >\n                    <FormGroup>\n                        <Label>Movie title</Label>\n                        <Input\n                            type=\"text\"\n                            name=\"title\"\n                            id=\"title\"\n                            value={formValues.title}\n                            onChange={e => updateFormFields(\"title\", e.target.value)}\n                        />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label>Movie release date</Label>\n                        <Input\n                            type=\"date\"\n                            name=\"release_date\"\n                            id=\"release_date\"\n                            value={formValues.release_date}\n                            onChange={e => updateFormFields(\"release_date\", e.target.value)}\n                        />\n                    </FormGroup>\n                </Form>\n            </CardBody>\n            <CardFooter className=\"d-flex justify-content-between\">\n                <Button tag={RouterNavLink} to=\"/movies\" color=\"warning\">\n                    Cancel\n                </Button>\n                <Button\n                    color=\"primary\"\n                    type=\"submit\"\n                    onClick={e => {\n                        e.preventDefault();\n                        handleFormSubmit((movieData && movieData.id )|| null, {\n                            title: formValues.title,\n                            release_date: formValues.release_date\n                        });\n                    }}\n                >\n                    Add\n                </Button>\n            </CardFooter>\n        </Card>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Button } from \"reactstrap\";\nimport { NavLink as RouterNavLink, Route, Switch } from \"react-router-dom\";\nimport jwt from \"jwt-decode\";\nimport { useFetch } from \"../hooks/useFetch\";\nimport { useAuth0 } from \"../react-auth0-spa\";\nimport { Movie } from \"./Movie\";\nimport { REACT_APP_SERVER_URL } from \"../utils/auth_config\";\nimport { Loader } from \"./UI/Loader\";\nimport { AddMovie } from './Forms/AddMovie';\n\nconst Movies = () => {\n    const [response, setResponse] = useState({});\n    const [pageNum, setPageNum] = useState(1);\n    const [token, setToken] = useState();\n    const { getTokenSilently, user, loading } = useAuth0();\n\n    const url = `${REACT_APP_SERVER_URL}/movies?page=${pageNum}`;\n    const result = useFetch(url, {}, token) || {};\n\n    useEffect(() => {\n        setResponse(result)\n    }, [result])\n\n    if (user && !loading) getTokenSilently().then(res => setToken(res));\n\n    let decodedToken;\n    if (token) decodedToken = jwt(token);\n\n    const selectPage = num => setPageNum(num);\n    const create_pagination = () => {\n        let pageNumbers = [];\n        let maxPage = Math.ceil(result.total_movies / 10);\n\n        for (let i = 1; i <= maxPage; i++) {\n            pageNumbers = [\n                ...pageNumbers,\n                <span\n                    key={i}\n                    className={`page-num ${i === pageNum ? \"active\" : \"\"}`}\n                    onClick={() => {\n                        selectPage(i);\n                    }}\n                >\n                    {i}\n                </span>\n            ];\n        }\n        return pageNumbers;\n    };\n\n    const removeItem = async id => {\n        const result = await fetch(`${REACT_APP_SERVER_URL}/movies/${id}`, {\n            method: \"DELETE\",\n            headers: {\n                Authorization: \"Bearer \" + token,\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        const getResult = await result.json()\n        setResponse(getResult)\n    };\n\n    return (\n        <>\n            <Container>\n                <h1>Movies!</h1>\n                {decodedToken &&\n                    decodedToken.permissions.indexOf(\"post+delete:movies\") !== -1 ? (\n                        <Button color=\"primary\" to={{\n                            pathname: \"/movies/add-movie\",\n                            state: { editing: false, movieData: null, token: token }\n                        }} tag={RouterNavLink}>\n                            Add a movie\n                        </Button>\n                    ) : null}\n                <Row>\n                    {response.movies ? (\n                        response.movies.map(movie => (\n                            <Movie\n                                key={movie.id}\n                                movieData={movie}\n                                exposedToken={decodedToken}\n                                token={token}\n                                removeItem={removeItem}\n                            />\n                        ))\n                    ) : (\n                            <Loader />\n                        )}\n                </Row>\n                <Row className=\"justify-content-center\">{create_pagination()}</Row>\n            </Container>\n        </>\n    );\n};\n\nexport const RouteMovies = () => {\n    return (\n        <Switch>\n            <Route path=\"/movies/add-movie\" component={AddMovie} />\n            <Route path=\"/movies\" component={Movies} />\n        </Switch>\n    )\n}","import React from \"react\";\nimport { Col, Card, CardBody, CardTitle, CardText, Button } from \"reactstrap\";\nimport { NavLink as RouterNavLink, withRouter } from \"react-router-dom\";\n\nconst ActorItem = ({\n    actorData,\n    exposedToken,\n    token,\n    removeItem\n}) => (\n        <>\n            <Col md=\"4\" className=\"my-3\">\n                <Card>\n                    <CardBody>\n                        <CardTitle>\n                            {actorData.name}, {actorData.age}\n                        </CardTitle>\n                        <CardText>{actorData.gender}</CardText>\n                        <div className=\"clearfix p-2\">\n                            {exposedToken.permissions.indexOf(\"patch:actors+movies\") !==\n                                -1 ? (\n                                    <Button\n                                        color=\"primary\"\n                                        className=\"float-left\"\n                                        tag={RouterNavLink}\n                                        to={{\n                                            pathname: '/actors/add-actor',\n                                            state: { actorData, editing: true, token }\n                                        }}\n                                    >\n                                        Edit\n                                </Button>\n                                ) : null}\n                            {exposedToken.permissions.indexOf(\"post+delete:actors\") !== -1 ? (\n                                <Button\n                                    color=\"danger\"\n                                    className=\"float-right\"\n                                    onClick={() => removeItem(actorData.id)}\n                                >\n                                    Delete\n                            </Button>\n                            ) : null}\n                        </div>\n                    </CardBody>\n                </Card>\n            </Col>\n        </>\n    );\n\nexport const Actor = withRouter(ActorItem)","import React, { useState } from \"react\";\nimport {\n    Card,\n    CardHeader,\n    CardBody,\n    CardFooter,\n    Button,\n    Form,\n    FormGroup,\n    Label,\n    Input\n} from \"reactstrap\";\nimport { REACT_APP_SERVER_URL } from \"../../utils/auth_config\";\nimport { NavLink as RouterNavLink } from \"react-router-dom\";\n\nexport const AddActor = props => {\n    const url = `${REACT_APP_SERVER_URL}/actors`;\n    const { editing, actorData, token } = props.location.state;\n    const [formValues, setFormValues] = useState({\n        name: (editing && actorData && actorData.name) || \"\",\n        age: (editing && actorData && actorData.age) || \"\",\n        gender: (editing && actorData && actorData.gender) || \"\"\n    });\n\n    const updateFormFields = (field, value) => {\n        setFormValues({\n            ...formValues,\n            [field]: value\n        });\n    };\n\n    const handleFormSubmit = async (id, data) => {\n        const result = await fetch(editing ? `${url}/${id}` : url, {\n            method: editing ? \"PATCH\" : \"POST\",\n            headers: {\n                Authorization: \"Bearer \" + token,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        });\n        const response = await result.json();\n\n        setFormValues({\n            name: response.actor.name,\n            age: response.actor.age,\n            gender: response.actor.gender\n        });\n        props.history.push('/actors')\n    };\n\n    return (\n        <>\n            <Card>\n                <CardHeader>Add an actor</CardHeader>\n                <CardBody>\n                    <Form\n                        onSubmit={e => {\n                            e.preventDefault();\n                            handleFormSubmit({\n                                name: formValues.name,\n                                age: formValues.age,\n                                gender: formValues.gender\n                            });\n                        }}\n                    >\n                        <FormGroup>\n                            <Label>Actor name</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"name\"\n                                id=\"name\"\n                                value={formValues.name}\n                                onChange={e => updateFormFields(\"name\", e.target.value)}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>Actor age</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"age\"\n                                id=\"age\"\n                                value={formValues.age}\n                                onChange={e => updateFormFields(\"age\", e.target.value)}\n                            />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>Actor gender</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"gender\"\n                                id=\"gender\"\n                                value={formValues.gender}\n                                onChange={e => updateFormFields(\"gender\", e.target.value)}\n                            />\n                        </FormGroup>\n                    </Form>\n                </CardBody>\n                <CardFooter className=\"d-flex justify-content-between\">\n                    <Button color=\"warning\" tag={RouterNavLink} to=\"/actors\">\n                        Cancel\n                    </Button>\n                    <Button\n                        color=\"primary\"\n                        type=\"submit\"\n                        onClick={e => {\n                            e.preventDefault();\n                            handleFormSubmit((actorData && actorData.id) || null ,{\n                                name: formValues.name,\n                                age: formValues.age,\n                                gender: formValues.gender\n                            });\n                        }}\n                    >\n                        Add\n                    </Button>\n                </CardFooter>\n            </Card>\n        </>\n    );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Row, Button } from \"reactstrap\";\nimport jwt from \"jwt-decode\";\nimport { useFetch } from \"../hooks/useFetch\";\nimport  { Switch, Route, NavLink as RouterNavLink } from \"react-router-dom\";\nimport { Actor } from \"./Actor\";\nimport { useAuth0 } from \"../react-auth0-spa\";\nimport { REACT_APP_SERVER_URL } from \"../utils/auth_config\";\nimport { Loader } from \"./UI/Loader\";\nimport { AddActor } from \"./Forms/AddActor\";\n\nconst Actors = () => {\n    const [response, setResponse] = useState({});\n    const [pageNum, setPageNum] = useState(1);\n    const [token, setToken] = useState();\n    const { getTokenSilently, user, loading } = useAuth0();\n    \n    const url = `${REACT_APP_SERVER_URL}/actors?page=${pageNum}`;\n    const result = useFetch(url, {}, token);\n\n    useEffect(() => {\n        setResponse(result)\n    }, [result])\n\n    if (user && !loading) getTokenSilently().then(res => setToken(res));\n\n    let decodedToken;\n    if (token) decodedToken = jwt(token);\n\n    const selectPage = num => setPageNum(num);\n    const create_pagination = () => {\n        let pageNumbers = [];\n        let maxPage = Math.ceil(result.total_actors / 10);\n\n        for (let i = 1; i <= maxPage; i++) {\n            pageNumbers = [\n                ...pageNumbers,\n                <span\n                    key={i}\n                    className={`page-num ${i === pageNum ? \"active\" : \"\"}`}\n                    onClick={() => {\n                        selectPage(i);\n                    }}\n                >\n                    {i}\n                </span>\n            ];\n        }\n        return pageNumbers;\n    };\n\n    const removeItem = async id => {\n        const result = await fetch(`${REACT_APP_SERVER_URL}/actors/${id}`, {\n            method: \"DELETE\",\n            headers: {\n                Authorization: \"Bearer \" + token,\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        const getResult = await result.json()\n        setResponse(getResult)\n    };\n\n    return (\n        <Container>\n            <h1>Actors</h1>\n            {decodedToken &&\n                decodedToken.permissions.indexOf(\"post+delete:actors\") !== -1 ? (\n                    <Button\n                        color=\"primary\"\n                        to={{\n                            pathname: \"/actors/add-actor\",\n                            state: { editing: false, actorData: null, token }\n                        }}\n                        tag={RouterNavLink}\n                    >\n                        Add an actor\n                    </Button>\n            ) : null}\n            <Row>\n                {response.actors ? (\n                    response.actors.map(actor => (\n                        <Actor\n                            key={actor.id}\n                            actorData={actor}\n                            exposedToken={decodedToken}\n                            token={token}\n                            removeItem={removeItem}\n                        />\n                    ))\n                    ) : (\n                        <Loader />\n                    )}\n            </Row>\n            <Row className=\"justify-content-center\">{create_pagination()}</Row>\n        </Container>\n    );\n};\n\nexport const RouteActors = () => (\n    <Switch>\n        <Route path=\"/actors/add-actor\" component={AddActor} />\n        <Route path=\"/actors\" component={Actors} />\n    </Switch>\n)","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport { Container } from \"reactstrap\";\nimport { useAuth0 } from './react-auth0-spa';\nimport history from './utils/history';\nimport { Home } from './components/Home';\nimport { NavBar } from './components/NavBar';\nimport { RouteMovies } from './components/Movies';\nimport { RouteActors } from './components/Actors';\nimport './App.css';\n\nfunction App() {\n  const { loading, user } = useAuth0;\n\n  if (loading && !user) {\n    return <p>Loading...</p>\n  }\n  return (\n    <Router history={history}>\n      <div id=\"app\" className=\"d-flex flex-column w-100\">\n        <NavBar />\n        <Container className=\"flex-grow-1 mt-5\">\n          <Switch>\n            <Route path='/' exact component={Home} />\n            <Route path='/movies' component={RouteMovies} />\n            <Route path='/actors' component={RouteActors} />\n          </Switch>\n        </Container>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Auth0Provider } from './react-auth0-spa';\nimport { REACT_APP_AUDIENCE, REACT_APP_DOMAIN, REACT_APP_CLIENTID, REACT_APP_CALLBACKURL } from './utils/auth_config';\nimport history from './utils/history'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nconst onRedirectCallback = appState => {\n    history.push(appState && appState.targetURL ? appState.targetURL : window.location.pathname)\n}\n\nReactDOM.render(\n    <Auth0Provider\n        domain={REACT_APP_DOMAIN}\n        client_id={REACT_APP_CLIENTID}\n        redirect_uri={REACT_APP_CALLBACKURL}\n        onRedirectCallback={onRedirectCallback}\n        audience={REACT_APP_AUDIENCE}\n    >\n        <App />\n    </Auth0Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}