{"version":3,"sources":["react-auth0-spa.js","utils/history.js","components/Home.js","components/NavBar.js","hooks/useFetch.js","components/Forms/AddMovie.js","utils/auth_config.js","components/Movie.js","components/Movies.js","components/Forms/AddActor.js","components/Actor.js","components/Actors.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","createBrowserHistory","Home","Jumbotron","Container","className","Card","CardBody","to","NavBar","useState","isOpen","setIsOpen","user","isAuthenticated","loginWithRedirect","logout","logoutWithRedirect","returnTo","origin","Navbar","color","light","expand","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","tag","RouterNavLink","exact","activeClassName","Button","id","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","src","picture","alt","width","DropdownMenu","DropdownItem","header","name","block","style","minHeight","useFetch","url","defaultData","token","method","body","data","updateData","useEffect","a","fetch","headers","Authorization","JSON","stringify","response","json","fetchData","AddMovie","toggleModal","movieData","editing","release_date","formValues","setFormValues","setResult","process","updateFormFields","field","value","handleFormSubmit","Modal","toggle","ModalHeader","ModalBody","Form","onSubmit","FormGroup","Label","Input","type","onChange","e","target","ModalFooter","Movie","movie","exposedToken","modalOpen","Col","md","CardTitle","CardText","permissions","indexOf","Movies","decodedToken","openModal","setOpenModal","pageNum","setPageNum","setToken","getTokenSilently","loading","then","res","jwt","result","Row","movies","map","key","pageNumbers","maxPage","Math","ceil","total_movies","i","create_pagination","AddActor","actorData","age","gender","Actor","actor","Actors","actors","total_actors","App","path","component","Boolean","hostname","match","ReactDOM","render","children","onRedirectCallback","initOptions","setIsAuthenticated","setUser","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","console","log","Provider","getIdTokenClaims","getTokenWithPopup","domain","client_id","redirect_uri","push","targetURL","audience","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39646248.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n    window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n    children,\n    onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n    ...initOptions\n}) => {\n    const [isAuthenticated, setIsAuthenticated] = useState()\n    const [user, setUser] = useState()\n    const [auth0Client, setAuth0] = useState()\n    const [loading, setLoading] = useState(true)\n    const [popupOpen, setPopupOpen] = useState(true)\n\n    useEffect(() => {\n        const initAuth0 = async () => {\n            const auth0FromHook = await createAuth0Client(initOptions);\n            setAuth0(auth0FromHook)\n\n            if (window.location.search.includes('code=')) {\n                const { appState } = await auth0FromHook.handleRedirectCallback()\n                onRedirectCallback(appState)\n            }\n\n            const isAuthenticated = await auth0FromHook.isAuthenticated()\n            setIsAuthenticated(isAuthenticated)\n\n            if (isAuthenticated) {\n                const user = await auth0FromHook.getUser()\n                setUser(user)\n            }\n\n            setLoading(false)\n        };\n        initAuth0()\n    }, [])\n\n    const loginWithPopup = async (params = {}) => {\n        setPopupOpen(true)\n\n        try {\n            await auth0Client.loginWithPopup(params)\n        } catch (error) {\n            console.log(error)\n        } finally {\n            setPopupOpen(false)\n        }\n\n        const user = await auth0Client.getUser()\n        setUser(user)\n        setIsAuthenticated(true)\n    }\n\n    const handleRedirectCallback = async () => {\n        setLoading(true)\n        await auth0Client.handleRedirectCallback()\n        const user = await auth0Client.getUser()\n        setLoading(false)\n        setIsAuthenticated(true)\n        setUser(user)\n    }\n\n    return (\n        <Auth0Context.Provider\n            value={{\n                isAuthenticated,\n                user,\n                loading,\n                popupOpen,\n                loginWithPopup,\n                handleRedirectCallback,\n                getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n                loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n                getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n                getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n                logout: (...p) => auth0Client.logout(...p)\n            }}\n        >\n            {children}\n        </Auth0Context.Provider>\n    )\n}","import { createBrowserHistory } from 'history'\n\nexport default createBrowserHistory()","import React from 'react';\nimport { Jumbotron, Card, CardBody, Container } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nexport const Home = () => (\n    <>\n        <Jumbotron>Casting Agency</Jumbotron>\n        <Container className=\"d-flex\">\n            <Card>\n                <CardBody>\n                    <Link to='/movies'>Movies</Link>\n                </CardBody>\n            </Card>\n            <Card>\n                <CardBody>\n                    <Link to='/actors'>Actors</Link>\n                </CardBody>\n            </Card>\n        </Container>\n\n\n    </>\n)","import React, { useState } from \"react\";\nimport { NavLink as RouterNavLink } from \"react-router-dom\";\nimport { useAuth0 } from \"../react-auth0-spa\";\nimport {\n  Collapse,\n  Container,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  Button,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from \"reactstrap\";\n\nexport const NavBar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { user, isAuthenticated, loginWithRedirect, logout } = useAuth0();\n  const toggle = () => setIsOpen(!isOpen);\n\n  const logoutWithRedirect = () =>\n    logout({\n      returnTo: window.location.origin\n    });\n\n  return (\n    <div className=\"nav-container\">\n      <Navbar color=\"light\" light expand=\"md\">\n        <Container>\n          <NavbarBrand className=\"logo\" />\n          <NavbarToggler onClick={toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"mr-auto\" navbar>\n              <NavItem>\n                <NavLink\n                  tag={RouterNavLink}\n                  to=\"/\"\n                  exact\n                  activeClassName=\"router-link-exact-active\"\n                >\n                  Home\n                </NavLink>\n              </NavItem>\n            </Nav>\n            <Nav className=\"d-none d-md-block\" navbar>\n              {!isAuthenticated && (\n                <NavItem>\n                  <Button\n                    id=\"qsLoginBtn\"\n                    color=\"primary\"\n                    className=\"btn-margin\"\n                    onClick={() => loginWithRedirect({})}\n                  >\n                    Log in\n                  </Button>\n                </NavItem>\n              )}\n              {isAuthenticated && (\n                <UncontrolledDropdown nav inNavbar>\n                  <DropdownToggle nav caret id=\"profileDropDown\">\n                    <img\n                      src={user ? user.picture : ''}\n                      alt=\"Profile\"\n                      className=\"nav-user-profile rounded-circle\"\n                      width=\"50\"\n                    />\n                  </DropdownToggle>\n                  <DropdownMenu>\n                    <DropdownItem header>{user ? user.name : ''}</DropdownItem>\n                    <DropdownItem\n                      tag={RouterNavLink}\n                      to=\"/movies\"\n                      className=\"dropdown-profile\"\n                      activeClassName=\"router-link-exact-active\"\n                    >\n                      Movies\n                    </DropdownItem>\n                    <DropdownItem\n                      tag={RouterNavLink}\n                      to=\"/actors\"\n                      className=\"dropdown-profile\"\n                      activeClassName=\"router-link-exact-active\"\n                    >\n                      Actors\n                    </DropdownItem>\n                    <DropdownItem\n                      id=\"qsLogoutBtn\"\n                      onClick={() => logoutWithRedirect()}\n                    >\n                      Log out\n                    </DropdownItem>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n              )}\n            </Nav>\n            {!isAuthenticated && (\n              <Nav className=\"d-md-none\" navbar>\n                <NavItem>\n                  <Button\n                    id=\"qsLoginBtn\"\n                    color=\"primary\"\n                    block\n                    onClick={() => loginWithRedirect({})}\n                  >\n                    Log in\n                  </Button>\n                </NavItem>\n              </Nav>\n            )}\n            {isAuthenticated && (\n              <Nav\n                className=\"d-md-none justify-content-between\"\n                navbar\n                style={{ minHeight: 170 }}\n              >\n                <NavItem>\n                  <span className=\"user-info\">\n                    <img\n                      src={user ? user.picture : ''}\n                      alt=\"Profile\"\n                      className=\"nav-user-profile d-inline-block rounded-circle mr-3\"\n                      width=\"50\"\n                    />\n                    <h6 className=\"d-inline-block\">{user ? user.name : ''}</h6>\n                  </span>\n                </NavItem>\n                <NavItem>\n                  {/* <FontAwesomeIcon icon=\"user\" className=\"mr-3\" /> */}\n                  <RouterNavLink\n                    to=\"/actors\"\n                    activeClassName=\"router-link-exact-active\"\n                  >\n                    Actors\n                  </RouterNavLink>\n                </NavItem>\n                <NavItem>\n                  {/* <FontAwesomeIcon icon=\"power-off\" className=\"mr-3\" /> */}\n                  <RouterNavLink\n                    to=\"#\"\n                    id=\"qsLogoutBtn\"\n                    onClick={() => logoutWithRedirect()}\n                  >\n                    Log out\n                  </RouterNavLink>\n                </NavItem>\n              </Nav>\n            )}\n          </Collapse>\n        </Container>\n      </Navbar>\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\n\nexport const useFetch = (url, defaultData, token, method='GET', body) => {\n    const [data, updateData] = useState(defaultData);\n\n    useEffect(() => {\n        async function fetchData() {\n            const response = await fetch(url, {\n                method: method,\n                headers: {\n                    Authorization: 'Bearer ' + token,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(body)\n            })\n            updateData(await response.json())\n        }\n        fetchData()\n    }, [url, token])\n\n    return data\n}","import React, { useState } from 'react'\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button, Form, FormGroup, Label, Input } from 'reactstrap'\nimport { REACT_APP_SERVER_URL } from '../../utils/auth_config'\n\nexport const AddMovie = ({ isOpen, toggleModal, movieData, token, editing }) => {\n    const [formValues, setFormValues] = useState({\n        title: (movieData && movieData.title) || '',\n        release_date: (movieData && movieData.release_date) || ''\n    })\n    const [result, setResult] = useState()\n    const url = `${REACT_APP_SERVER_URL}/movies`;\n\n    const updateFormFields = (field, value) => {\n        setFormValues({\n            ...formValues,\n            [field]: value\n        })\n    }\n\n    const handleFormSubmit = async () => {\n        const data = {\n            title: formValues.title,\n            release_date: formValues.release_date,\n        }\n        setResult(await fetch(editing ? `${url}/${movieData.id}` : url, {\n            method: editing ? 'PATCH' : 'POST',\n            headers: {\n                Authorization: 'Bearer ' + token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        }))\n        toggleModal()\n    }\n\n    return (\n        <Modal isOpen={isOpen} toggle={toggleModal}>\n            <ModalHeader toggle={toggleModal}>Add a movie</ModalHeader>\n            <ModalBody>\n                <Form onSubmit={handleFormSubmit}>\n                    <FormGroup>\n                        <Label>Movie title</Label>\n                        <Input\n                            type=\"text\"\n                            name=\"title\"\n                            id=\"title\"\n                            value={formValues.title}\n                            onChange={e => updateFormFields('title', e.target.value)} />\n                    </FormGroup>\n                    <FormGroup>\n                        <Label>Movie release date</Label>\n                        <Input\n                            type=\"date\"\n                            name=\"release_date\"\n                            id=\"release_date\"\n                            value={formValues.release_date}\n                            onChange={e => updateFormFields('release_date', e.target.value)} />\n                    </FormGroup>\n                </Form>\n            </ModalBody>\n            <ModalFooter>\n                <Button color=\"warning\" onClick={toggleModal}>Cancel</Button>\n                <Button color=\"primary\" type='submit' onClick={handleFormSubmit}>Add</Button>\n            </ModalFooter>\n        </Modal>\n    )\n}","export const REACT_APP_DOMAIN = process.env.REACT_APP_DOMAIN;\nexport const REACT_APP_CLIENTID = process.env.REACT_APP_CLIENTID;\nexport const REACT_APP_AUDIENCE = process.env.REACT_APP_AUDIENCE;\nexport const REACT_APP_CALLBACKURL = process.env.REACT_APP_CALLBACKURL;\nexport const REACT_APP_URL = process.env.REACT_APP_URL;\nexport const REACT_APP_SERVER_URL = process.env.REACT_APP_SERVER_URL","import React, { useState} from \"react\";\nimport { Col, Card, CardBody, CardTitle, CardText, Button } from \"reactstrap\";\nimport { AddMovie } from './Forms/AddMovie';\n\nexport const Movie = ({ movie, exposedToken, token }) => {\n    const [modalOpen, toggleModal] = useState(false)\n\n    return (\n        <>\n            <Col md=\"4\" className=\"my-3\">\n                <Card>\n                    <CardBody>\n                        <CardTitle>{movie.title}</CardTitle>\n                        <CardText>Release Date: {movie.release_date}</CardText>\n                        <div className=\"clearfix p-2\">\n                            {exposedToken.permissions.indexOf(\"patch:actors+movies\") !== -1 ? (\n                                <Button color=\"primary\" className=\"float-left\" onClick={() => {\n                                    toggleModal(!modalOpen)\n                                }}>\n                                    Edit\n                            </Button>\n                            ) : null}\n                            {exposedToken.permissions.indexOf(\"post+delete:movies\") !== -1 ? (\n                                <Button color=\"danger\" className=\"float-right\">\n                                    Delete\n                            </Button>\n                            ) : null}\n                        </div>\n                    </CardBody>\n                </Card>\n            </Col>\n            {\n                modalOpen ? <AddMovie isOpen={modalOpen} toggleModal={() => toggleModal(!modalOpen)} movieData={movie} editing token={token} /> : null\n            }\n        </>\n    );\n}\n","import React, { useState } from 'react';\nimport { Container, Row, Button } from 'reactstrap';\nimport jwt from 'jwt-decode';\nimport { useFetch } from '../hooks/useFetch';\nimport { useAuth0 } from '../react-auth0-spa';\nimport { Movie } from './Movie';\nimport { AddMovie } from './Forms/AddMovie';\nimport { REACT_APP_SERVER_URL } from '../utils/auth_config'\n\nexport const Movies = () => {\n    const [openModal, setOpenModal] = useState(false)\n    const [pageNum, setPageNum] = useState(1)\n    const [token, setToken] = useState()\n    const { getTokenSilently, user, loading } = useAuth0()\n    \n    if (user && !loading) getTokenSilently().then(res => setToken(res))\n\n    let decodedToken;\n    if (token) decodedToken = jwt(token)\n    \n    const url = `${REACT_APP_SERVER_URL}/movies?page=${pageNum}`\n    const result = useFetch(url, {}, token) || {}\n\n    const selectPage = num => setPageNum(num)\n    const create_pagination = () => {\n        let pageNumbers = [];\n        let maxPage = Math.ceil(result.total_movies / 10)\n\n        for (let i = 1; i <= maxPage; i++) {\n            pageNumbers = [...pageNumbers, <span\n                key={i}\n                className={`page-num ${i === pageNum ? 'active' : ''}`}\n                onClick={() => { selectPage(i) }}>{i}\n            </span>]\n        }\n        return pageNumbers\n    }\n\n    return (\n        <Container>\n            <h1>Movies!</h1>\n            {\n                (decodedToken && decodedToken.permissions.indexOf(\"post+delete:movies\") !== -1) ?\n                    <Button color=\"primary\" onClick={() => setOpenModal(!openModal)}>Add a movie</Button> :\n                    null\n            }\n            { openModal ? <AddMovie isOpen={openModal} toggleModal={() => setOpenModal(!openModal)} token={token} /> : null }\n            <Row>\n                {result.movies ? result.movies.map(movie => <Movie key={movie.id} movie={movie} exposedToken={decodedToken} token={token} />) : <p>Loading...</p>}\n            </Row>\n            <Row className=\"justify-content-center\">\n                {create_pagination()}\n            </Row>\n        </Container>\n    )\n}","import React, { useState } from 'react'\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button, Form, FormGroup, Label, Input } from 'reactstrap'\nimport { REACT_APP_SERVER_URL } from '../../utils/auth_config'\n\nexport const AddActor = ({ isOpen, toggleModal, actorData, editing, token }) => {\n    const [formValues, setFormValues] = useState({\n        name: (actorData && actorData.name) || '',\n        age: (actorData && actorData.age) || '',\n        gender: (actorData && actorData.gender) || ''\n    })\n    const url = `${REACT_APP_SERVER_URL}/actors`;\n\n    const updateFormFields = (field, value) => {\n        setFormValues({\n            ...formValues,\n            [field]: value\n        })\n    }\n\n    const handleFormSubmit = async () => {\n        const data = {\n            name: formValues.name,\n            age: formValues.age,\n            gender: formValues.gender\n        }\n        await fetch(editing ? `${url}/${actorData.id}` : url, {\n            method: editing ? 'PATCH' : 'POST',\n            headers: {\n                Authorization: 'Bearer ' + token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        })\n        toggleModal()\n    }\n\n    return (\n        <>\n            <Modal isOpen={isOpen} toggle={toggleModal}>\n                <ModalHeader toggle={toggleModal}>Add an actor</ModalHeader>\n                <ModalBody>\n                    <Form onSubmit={handleFormSubmit}>\n                        <FormGroup>\n                            <Label>Actor name</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"name\"\n                                id=\"name\"\n                                value={formValues.name}\n                                onChange={e => updateFormFields('name', e.target.value)} />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>Actor age</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"age\"\n                                id=\"age\"\n                                value={formValues.age}\n                                onChange={e => updateFormFields('age', e.target.value)} />\n                        </FormGroup>\n                        <FormGroup>\n                            <Label>Actor gender</Label>\n                            <Input\n                                type=\"text\"\n                                name=\"gender\"\n                                id=\"gender\"\n                                value={formValues.gender}\n                                onChange={e => updateFormFields('gender', e.target.value)} />\n                        </FormGroup>\n                    </Form>\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"warning\" onClick={toggleModal}>Cancel</Button>\n                    <Button color=\"primary\" type='submit' onClick={handleFormSubmit}>Add</Button>\n                </ModalFooter>\n            </Modal>\n        </>\n    )\n}","import React, { useState } from 'react'\nimport { Col, Card, CardBody, CardTitle, CardText, Button } from 'reactstrap';\nimport { AddActor } from './Forms/AddActor';\n\nexport const Actor = ({ actor, exposedToken, token }) => {\n    const [modalOpen, toggleModal] = useState(false)\n\n    return (\n        <>\n            <Col md=\"4\" className=\"my-3\">\n                <Card>\n                    <CardBody>\n                        <CardTitle>{actor.name}, {actor.age}</CardTitle>\n                        <CardText>{actor.gender}</CardText>\n                        <div className=\"clearfix p-2\">\n                            {exposedToken.permissions.indexOf(\"patch:actors+movies\") !== -1 ? (\n                                <Button color=\"primary\" className=\"float-left\" onClick={() => {\n                                    toggleModal(!modalOpen)\n                                }}>\n                                    Edit\n                            </Button>\n                            ) : null}\n                            {exposedToken.permissions.indexOf(\"post+delete:actors\") !== -1 ? (\n                                <Button color=\"danger\" className=\"float-right\">\n                                    Delete\n                            </Button>\n                            ) : null}\n                        </div>\n                    </CardBody>\n                </Card>\n            </Col>\n            {\n                modalOpen ? <AddActor isOpen={modalOpen} toggleModal={() => toggleModal(!modalOpen)} actorData={actor} editing token={token} /> : null\n            }\n        </>\n    )\n}","import React, { useState } from 'react';\nimport { Container, Row, Button } from 'reactstrap';\nimport jwt from 'jwt-decode';\nimport { useFetch } from '../hooks/useFetch';\nimport { Actor } from './Actor';\nimport { useAuth0 } from '../react-auth0-spa';\nimport { AddActor } from './Forms/AddActor';\nimport { REACT_APP_SERVER_URL } from '../utils/auth_config'\n\nexport const Actors = () => {\n    const [openModal, setOpenModal] = useState(false)\n    const [pageNum, setPageNum] = useState(1)\n    const [token, setToken] = useState()\n    const { getTokenSilently, user, loading } = useAuth0()\n\n    if (user && !loading) getTokenSilently().then(res => setToken(res))\n\n    let decodedToken;\n    if (token) decodedToken = jwt(token)\n\n    const url = `${REACT_APP_SERVER_URL}/actors?page=${pageNum}`\n    const result = useFetch(url, {}, token)\n\n    const selectPage = num => setPageNum(num)\n    const create_pagination = () => {\n        let pageNumbers = [];\n        let maxPage = Math.ceil(result.total_actors / 10)\n\n        for (let i = 1; i <= maxPage; i++) {\n            pageNumbers = [...pageNumbers, <span\n                key={i}\n                className={`page-num ${i === pageNum ? 'active' : ''}`}\n                onClick={() => { selectPage(i) }}>{i}\n            </span>]\n        }\n        return pageNumbers\n    }\n\n    return (\n        <Container>\n            <h1>Actors</h1>\n            {\n                (decodedToken && decodedToken.permissions.indexOf(\"post+delete:actors\") !== -1) ?\n                    <Button color=\"primary\" onClick={() => setOpenModal(!openModal)}>Add an actor</Button> :\n                    null\n            }\n            { openModal ? <AddActor isOpen={openModal} toggleModal={() => setOpenModal(!openModal)} token={token} /> : null }\n            <Row>\n                {result.actors ? result.actors.map(actor => <Actor key={actor.id} actor={actor} exposedToken={decodedToken} token={token} />) : <p>Loading...</p>}\n            </Row>\n            <Row className=\"justify-content-center\">\n                {create_pagination()}\n            </Row>\n        </Container>\n    )\n}","import React from 'react';\nimport { Router, Route, Switch } from 'react-router-dom';\nimport { Container } from \"reactstrap\";\nimport { useAuth0 } from './react-auth0-spa';\nimport history from './utils/history';\nimport { Home } from './components/Home';\nimport { NavBar } from './components/NavBar';\nimport { Movies } from './components/Movies';\nimport { Actors } from './components/Actors';\nimport './App.css';\n\nfunction App() {\n  const { loading, user } = useAuth0;\n\n  if (loading && !user) {\n    return <p>Loading...</p>\n  }\n  return (\n    <Router history={history}>\n      <div id=\"app\" className=\"d-flex flex-column w-100\">\n        <NavBar />\n        <Container className=\"flex-grow-1 mt-5\">\n          <Switch>\n            <Route path='/' exact component={Home} />\n            <Route path='/movies' component={Movies} />\n            <Route path='/actors' component={Actors} />\n          </Switch>\n        </Container>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Auth0Provider } from './react-auth0-spa';\nimport { REACT_APP_AUDIENCE, REACT_APP_DOMAIN, REACT_APP_CLIENTID, REACT_APP_CALLBACKURL } from './utils/auth_config';\nimport history from './utils/history'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nconst onRedirectCallback = appState => {\n    history.push(appState && appState.targetURL ? appState.targetURL : window.location.pathname)\n}\n\nReactDOM.render(\n    <Auth0Provider\n        domain={REACT_APP_DOMAIN}\n        client_id={REACT_APP_CLIENTID}\n        redirect_uri={REACT_APP_CALLBACKURL}\n        onRedirectCallback={onRedirectCallback}\n        audience={REACT_APP_AUDIENCE}\n    >\n        <App />\n    </Auth0Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}